import obd
import time
import csv
from datetime import datetime

# List of supported OBD commands (after filtering out unsupported ones)
obd_commands = [
    'ABSOLUTE_LOAD', 'ACCELERATOR_POS_D', 'ACCELERATOR_POS_E', 'ACCELERATOR_POS_F', 'AIR_STATUS',
    'AMBIANT_AIR_TEMP', 'AUX_INPUT_STATUS', 'BAROMETRIC_PRESSURE', 'CALIBRATION_ID', 'CATALYST_TEMP_B1S1', 
    'CATALYST_TEMP_B1S2', 'CATALYST_TEMP_B2S1', 'CATALYST_TEMP_B2S2', 'COMMANDED_EGR', 'COMMANDED_EQUIV_RATIO', 
    'CONTROL_MODULE_VOLTAGE', 'COOLANT_TEMP', 'CVN', 'DISTANCE_SINCE_DTC_CLEAR', 'DISTANCE_W_MIL', 'DTC_ABSOLUTE_LOAD',
    'DTC_ACCELERATOR_POS_D', 'DTC_ACCELERATOR_POS_E', 'DTC_ACCELERATOR_POS_F', 'DTC_AIR_STATUS', 'DTC_AMBIANT_AIR_TEMP',
    'DTC_AUX_INPUT_STATUS', 'DTC_BAROMETRIC_PRESSURE', 'DTC_CATALYST_TEMP_B1S1', 'DTC_CATALYST_TEMP_B1S2', 
    'DTC_CATALYST_TEMP_B2S1', 'DTC_CATALYST_TEMP_B2S2', 'DTC_COMMANDED_EGR', 'DTC_COMMANDED_EQUIV_RATIO', 
    'DTC_CONTROL_MODULE_VOLTAGE', 'DTC_COOLANT_TEMP', 'DTC_DISTANCE_SINCE_DTC_CLEAR', 'DTC_DISTANCE_W_MIL', 'DTC_ENGINE_LOAD', 
    'DTC_EVAPORATIVE_PURGE', 'DTC_FUEL_INJECT_TIMING', 'DTC_FUEL_LEVEL', 'DTC_FUEL_PRESSURE', 'DTC_FUEL_RAIL_PRESSURE_ABS', 
    'DTC_FUEL_RAIL_PRESSURE_DIRECT', 'DTC_FUEL_RAIL_PRESSURE_VAC', 'DTC_FUEL_RATE', 'DTC_FUEL_STATUS', 'DTC_FUEL_TYPE', 
    'DTC_HYBRID_BATTERY_REMAINING', 'DTC_INTAKE_PRESSURE', 'DTC_INTAKE_TEMP', 'DTC_LONG_FUEL_TRIM_1', 'DTC_LONG_FUEL_TRIM_2', 
    'DTC_LONG_O2_TRIM_B1', 'DTC_LONG_O2_TRIM_B2', 'DTC_MAF', 'DTC_MAX_MAF', 'DTC_O2_B1S1', 'DTC_O2_B1S2', 
    'DTC_O2_B1S3', 'DTC_O2_B1S4', 'DTC_O2_B2S1', 'DTC_O2_B2S2', 'DTC_O2_B2S3', 'DTC_O2_B2S4', 'DTC_O2_S1_WR_CURRENT', 
    'DTC_O2_S1_WR_VOLTAGE', 'DTC_O2_S2_WR_CURRENT', 'DTC_O2_S2_WR_VOLTAGE', 'DTC_O2_S3_WR_CURRENT', 'DTC_O2_S3_WR_VOLTAGE',
    'DTC_O2_S4_WR_CURRENT', 'DTC_O2_S4_WR_VOLTAGE', 'DTC_O2_SENSORS', 'DTC_OBD_COMPLIANCE', 'DTC_OIL_TEMP', 'DTC_PIDS_A', 
    'DTC_PIDS_B', 'DTC_PIDS_C', 'DTC_RPM', 'DTC_RUN_TIME', 'DTC_RUN_TIME_MIL', 'DTC_SHORT_FUEL_TRIM_1', 'DTC_SHORT_FUEL_TRIM_2', 
    'DTC_SHORT_O2_TRIM_B1', 'DTC_SHORT_O2_TRIM_B2', 'DTC_SPEED', 'DTC_STATUS', 'DTC_STATUS_DRIVE_CYCLE', 'DTC_THROTTLE_ACTUATOR', 
    'DTC_THROTTLE_POS', 'DTC_THROTTLE_POS_B', 'DTC_THROTTLE_POS_C', 'DTC_TIME_SINCE_DTC_CLEARED', 'DTC_TIMING_ADVANCE', 
    'DTC_WARMUPS_SINCE_DTC_CLEAR', 'EGR_ERROR', 'ELM_VERSION', 'ELM_VOLTAGE', 'EMISSION_REQ', 'ENGINE_LOAD', 'ETHANOL_PERCENT', 
    'EVAPORATIVE_PURGE', 'EVAP_VAPOR_PRESSURE', 'EVAP_VAPOR_PRESSURE_ABS', 'FREEZE_DTC', 'FUEL_INJECT_TIMING', 'FUEL_LEVEL',
    'FUEL_PRESSURE', 'FUEL_RAIL_PRESSURE_ABS', 'FUEL_RAIL_PRESSURE_DIRECT', 'FUEL_RAIL_PRESSURE_VAC', 'FUEL_RATE', 'FUEL_STATUS',
    'FUEL_TYPE', 'GET_CURRENT_DTC', 'GET_DTC', 'HYBRID_BATTERY_REMAINING', 'INTAKE_PRESSURE', 'INTAKE_TEMP', 'LONG_FUEL_TRIM_1', 
    'LONG_FUEL_TRIM_2', 'LONG_O2_TRIM_B1', 'LONG_O2_TRIM_B2', 'MAF', 'MAX_MAF', 'MAX_VALUES', 'MIDS_A', 'MIDS_B', 'MIDS_C', 
    'MIDS_D', 'MIDS_E', 'MIDS_F', 'MONITOR_BOOST_PRESSURE_B1', 'MONITOR_BOOST_PRESSURE_B2', 'MONITOR_CATALYST_B1', 
    'MONITOR_CATALYST_B2', 'MONITOR_CATALYST_B3', 'MONITOR_CATALYST_B4', 'MONITOR_EGR_B1', 'MONITOR_EGR_B2', 'MONITOR_EGR_B3', 
    'MONITOR_EGR_B4', 'MONITOR_EVAP_020', 'MONITOR_EVAP_040', 'MONITOR_EVAP_090', 'MONITOR_EVAP_150', 'MONITOR_FUEL_SYSTEM_B1', 
    'MONITOR_FUEL_SYSTEM_B2', 'MONITOR_FUEL_SYSTEM_B3', 'MONITOR_FUEL_SYSTEM_B4', 'MONITOR_HEATED_CATALYST_B1', 
    'MONITOR_HEATED_CATALYST_B2', 'MONITOR_HEATED_CATALYST_B3', 'MONITOR_HEATED_CATALYST_B4', 'MONITOR_MISFIRE_CYLINDER_1', 
    'MONITOR_MISFIRE_CYLINDER_10', 'MONITOR_MISFIRE_CYLINDER_11', 'MONITOR_MISFIRE_CYLINDER_12', 'MONITOR_MISFIRE_CYLINDER_2', 
    'MONITOR_MISFIRE_CYLINDER_3', 'MONITOR_MISFIRE_CYLINDER_4', 'MONITOR_MISFIRE_CYLINDER_5', 'MONITOR_MISFIRE_CYLINDER_6', 
    'MONITOR_MISFIRE_CYLINDER_7', 'MONITOR_MISFIRE_CYLINDER_8', 'MONITOR_MISFIRE_CYLINDER_9', 'MONITOR_MISFIRE_GENERAL', 
    'MONITOR_NOX_ABSORBER_B1', 'MONITOR_NOX_ABSORBER_B2', 'MONITOR_NOX_CATALYST_B1', 'MONITOR_NOX_CATALYST_B2', 'MONITOR_O2_B1S1',
    'MONITOR_O2_B1S2', 'MONITOR_O2_B1S3', 'MONITOR_O2_B1S4', 'MONITOR_O2_B2S1', 'MONITOR_O2_B2S2', 'MONITOR_O2_B2S3', 
    'MONITOR_O2_B2S4', 'MONITOR_O2_B3S1', 'MONITOR_O2_B3S2', 'MONITOR_O2_B3S3', 'MONITOR_O2_B3S4', 'MONITOR_O2_B4S1', 
    'MONITOR_O2_B4S2', 'MONITOR_O2_B4S3', 'MONITOR_O2_B4S4', 'MONITOR_O2_HEATER_B1S1', 'MONITOR_O2_HEATER_B1S2', 
    'MONITOR_O2_HEATER_B1S3', 'MONITOR_O2_HEATER_B1S4', 'MONITOR_O2_HEATER_B2S1', 'MONITOR_O2_HEATER_B2S2', 
    'MONITOR_O2_HEATER_B2S3', 'MONITOR_O2_HEATER_B2S4', 'MONITOR_O2_HEATER_B3S1', 'MONITOR_O2_HEATER_B3S2', 
    'MONITOR_O2_HEATER_B3S3', 'MONITOR_O2_HEATER_B3S4', 'MONITOR_O2_HEATER_B4S1', 'MONITOR_O2_HEATER_B4S2', 
    'MONITOR_O2_HEATER_B4S3', 'MONITOR_O2_HEATER_B4S4', 'MONITOR_PM_FILTER_B1', 'MONITOR_PM_FILTER_B2', 'MONITOR_PURGE_FLOW', 
    'MONITOR_SECONDARY_AIR_1', 'MONITOR_SECONDARY_AIR_2', 'MONITOR_SECONDARY_AIR_3', 'MONITOR_SECONDARY_AIR_4', 
    'MONITOR_VVT_B1', 'MONITOR_VVT_B2', 'MONITOR_VVT_B3', 'MONITOR_VVT_B4', 'O2_B1S1', 'O2_B1S2', 'O2_B1S3', 'O2_B1S4', 
    'O2_B2S1', 'O2_B2S2', 'O2_B2S3', 'O2_B2S4', 'O2_S1_WR_CURRENT', 'O2_S1_WR_VOLTAGE', 'O2_S2_WR_CURRENT', 
    'O2_S2_WR_VOLTAGE', 'O2_S3_WR_CURRENT', 'O2_S3_WR_VOLTAGE', 'O2_S4_WR_CURRENT', 'O2_S4_WR_VOLTAGE', 'O2_S5_WR_CURRENT', 
    'O2_S5_WR_VOLTAGE', 'O2_S6_WR_CURRENT', 'O2_S6_WR_VOLTAGE', 'O2_S7_WR_CURRENT', 'O2_S7_WR_VOLTAGE', 'O2_S8_WR_CURRENT', 
    'O2_S8_WR_VOLTAGE', 'O2_SENSORS', 'O2_SENSORS_ALT', 'OBD_COMPLIANCE', 'OIL_TEMP', 'PIDS_9A', 'PIDS_A', 'PIDS_B', 'PIDS_C', 
    'RELATIVE_ACCEL_POS', 'RELATIVE_THROTTLE_POS', 'RPM', 'RUN_TIME', 'RUN_TIME_MIL', 'SHORT_FUEL_TRIM_1', 'SHORT_FUEL_TRIM_2', 
    'SHORT_O2_TRIM_B1', 'SHORT_O2_TRIM_B2', 'SPEED', 'STATUS', 'STATUS_DRIVE_CYCLE', 'THROTTLE_ACTUATOR', 'THROTTLE_POS', 
    'THROTTLE_POS_B', 'THROTTLE_POS_C', 'TIME_SINCE_DTC_CLEARED', 'TIMING_ADVANCE', 'VIN', 'VIN_MESSAGE_COUNT', 'WARMUPS_SINCE_DTC_CLEAR'
]

# Initialize connection to /dev/pts/5
connection = obd.OBD("/dev/pts/4")  # specify the port for connection

# Create a list to store the results (for CSV writing)
collected_data = []

# Start collecting data for 5 minutes
start_time = time.time()
end_time = start_time + 5 * 60  # Run for 5 minutes (300 seconds)

# Collect data every second
while time.time() < end_time:
    # Get the current timestamp for the second
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # Initialize a dictionary for the responses at this second
    second_data = {'Timestamp': timestamp}
    
    # Loop through commands and collect data
    for command in obd_commands:
        cmd = getattr(obd.commands, command)  # Get command from obd.commands module
        
        # Handle unsupported commands gracefully
        try:
            response = connection.query(cmd)  # Query the command
            if response.is_null():  # Skip unsupported values
                continue
            else:
                second_data[command] = response.value
        except obd.OBDCommandError as e:
            # In case the command is not supported or throws an error
            continue
    
    # Store the second_data in the collected_data list
    if second_data:
        collected_data.append(second_data)
    
    # Wait for 1 second before collecting the data again
    time.sleep(1)

# Capture all unique fieldnames
fieldnames = set()
for data in collected_data:
    fieldnames.update(data.keys())

# Write the collected data to a CSV file
with open('obd_data.csv', 'w', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=sorted(fieldnames))
    writer.writeheader()
    writer.writerows(collected_data)

print("Data collection completed and saved to 'obd_data.csv'.")
